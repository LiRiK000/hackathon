name: hackathon

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:4000
    profiles:
      - only_front
      - front
      - full
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./main_backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FRONTEND_PUBLIC_ENDPOINT=${FRONTEND_PUBLIC_ENDPOINT}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT}
      - SECRET_KEY=${SECRET_KEY}
      - SERVER_PORT=8000
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_REGION=${MINIO_REGION}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT}
    profiles:
      - only_backend
      - back
      - full
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:bullseye
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    profiles:
      - only_postgres
      - back
      - full
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:bookworm
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --loglevel warning
    volumes:
      - redis_data:/data
    profiles:
      - only_redis
      - back
      - full
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli --raw incr ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    command: server /data --quiet --console-address ":9001" --address ":9000"
    restart: unless-stopped
    ports:
      - "9000:9000"  # API
    expose:
      - 9001  # Веб консоль
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_REGION=${MINIO_REGION}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT}
    profiles:
      - only_minio
      - back
      - full
    healthcheck:
      test: ["CMD-SHELL", "mc ready local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    profiles:
      - full
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  pg_data:
  redis_data:
  minio_data:

networks:
  app-network:
    driver: bridge
